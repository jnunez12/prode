<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap-grid.css">
    <link rel="stylesheet" href="/styles/bootstrap-grid.min.css">
    <link rel="stylesheet" href="/styles/bootstrap-reboot.css">
    <link rel="stylesheet" href="/styles/bootstrap-reboot.min.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>

     <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="/"> Inicio </a>
        </div>
      </div>
        <ul class="nav nav-pills">
            <% if (session.authenticated) { %>
              <li class="nav-item"> Bienvenido <a class ="nav-link" href="/user/show/<%= session.User.id %>">  <%= session.User.nombre %> </a> </li>
            <% } %>
            <% if (session.authenticated && session.User.admin) { %>
              <li class="nav-item"><a class ="nav-link" href="/user">Administrar usuarios</a></li>
              <% } %>
          </ul>
      
      <div class="navbar-right">
            <% if(session.authenticated) { %>
              <a class="btn btn-outline-success my-2 my-sm-0" href="/session/destroy">Log out</a>
            <% } %>
      </div>
      <% if(!session.authenticated) { %>
          <form class="form-horizontal form-inline" action="/session/create">
            
            <div class="form-group">
              <input type="text" placeholder="Nombre de usuario" name="nombre" class="form-control">
            </div>
            <div class="form-group">
              
              <input type="password" placeholder="Contraseña" name="password" class="form-control">
            </div>
            <button type="submit" class="btn btn-success">Iniciar sesión</button>
            <input type="hidden" name="_csrf" value="<%= _csrf %>" />
          </form>
          <% } %>
      </div>
    </nav> 

    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-3.3.1.js"></script>
    <script src="/js/dependencies/jquery.validate.js"></script>
    <script src="/js/dependencies/jquery.validate.min.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/bootstrap.bundle.js"></script>
    <script src="/js/dependencies/bootstrap.bundle.min.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/dependencies/customValidate.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
